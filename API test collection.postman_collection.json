{
	"info": {
		"_postman_id": "18c105dc-2530-4bd4-b211-7d414196d963",
		"name": "API test collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20291754",
		"_collection_link": "https://planetary-trinity-505204.postman.co/workspace/API-Testing~02aeeec7-be12-482d-a491-71ab080d40e8/collection/20291754-18c105dc-2530-4bd4-b211-7d414196d963?action=share&source=collection_link&creator=20291754"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assert status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Assertion response time",
									"pm.test(\"Verify the response time is less than 3 seconds\", function () {",
									"    const threeSecondsMs = 3_000; // 3 seconds in milliseconds\",",
									"pm.expect(pm.response.responseTime).to.be.below(threeSecondsMs);",
									"});",
									"//Assert properties",
									"const jsonData = pm.response.json();",
									"pm.test('Verify all of the Properties are available', function (){",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"//Assert property value",
									"pm.test(\"Message value is correct\", function () {",
									"   const json = pm.response.json();",
									"    pm.expect(json).to.have.property(\"message\", \"1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 1,\n  \"username\": \"Didil\",\n  \"firstName\": \"Didil\",\n  \"lastName\": \"Didil\",\n  \"email\": \"Didil@yopmail.com\",\n  \"password\": \"Test@123\",\n  \"phone\": \"0987654321\",\n  \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Assertion response time",
									"pm.test(\"Verify the response time is less than 3 seconds\", function () {",
									"    const threeSecondsMs = 3_000; // 3 seconds in milliseconds\",",
									"pm.expect(pm.response.responseTime).to.be.below(threeSecondsMs);",
									"});",
									"//Assert properties\",",
									"const jsonData = pm.response.json();",
									"pm.test('Verify all of the Properties are available', function (){",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('firstName');",
									"    pm.expect(jsonData).to.have.property('lastName');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('password');",
									"    pm.expect(jsonData).to.have.property('phone');",
									"    pm.expect(jsonData).to.have.property('userStatus');",
									"});",
									"//Assertion property value",
									"pm.test(\"Id value is correct\", function () {",
									"   const json = pm.response.json();",
									"    pm.expect(json).to.have.property(\"id\", 1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/Didil",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								"Didil"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Assertion response time",
									"pm.test(\"Verify the response time is less than 3 seconds\", function () {",
									"    const threeSecondsMs = 3_000; // 3 seconds in milliseconds\",",
									"pm.expect(pm.response.responseTime).to.be.below(threeSecondsMs);",
									"});",
									"//Assert properties",
									"const jsonData = pm.response.json();",
									"pm.test('Verify all of the Properties are available', function (){",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"//Assertion property value",
									"pm.test(\"Message value is correct\", function () {",
									"   const json = pm.response.json();",
									"    pm.expect(json).to.have.property(\"message\", \"2\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 2,\n    \"username\": \"Didil\",\n    \"firstName\": \"Didil\",\n    \"lastName\": \"Didil\",\n    \"email\": \"Didil@yopmail.com\",\n    \"password\": \"Test@123\",\n    \"phone\": \"0987654321\",\n    \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/user/Didil",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"user",
								"Didil"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "username Negative",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	]
}